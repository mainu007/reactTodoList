{"version":3,"sources":["Listitem.jsx","App.js","serviceWorker.js","index.js"],"names":["Listitem","listItem","this","props","items","map","val","key","className","getIndicatorClasses","tag","text","getBadgeClasses","date","time","onClick","completeItem","removeItem","classes","Component","App","state","Date","toLocaleDateString","toLocaleTimeString","currentItem","changeInput","e","txt","target","value","replace","charAt","toUpperCase","setState","now","handleSubmit","preventDefault","item","newItem","console","log","filter","style","position","onSubmit","onChange","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8202a365.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Listitem extends Component {\n  render() {\n    const items = this.props.items;\n    const listItem = items.map((val) => {\n      return (\n        <li key={val.key} className=\"list-group-item\">\n          <div className={this.getIndicatorClasses(val.tag)}></div>\n          <div className=\"widget-content p-0\">\n            <div className=\"widget-content-wrapper\">\n              <div className=\"widget-content-left ml-2\">\n                <div className=\"widget-heading\">\n                  {val.text}\n                  <div className={this.getBadgeClasses(val.tag)}>{val.tag}</div>\n                </div>\n                <div className=\"widget-subheading\">\n                  <i>{val.date}</i> {val.time}\n                </div>\n              </div>\n              <div className=\"widget-content-right\">\n                <button\n                  onClick={() => this.props.completeItem(val.key)}\n                  className=\"border-0 btn-transition btn btn-outline-success\"\n                >\n                  <i className=\"fa fa-check\"></i>\n                </button>\n                <button\n                  onClick={() => this.props.removeItem(val.key)}\n                  className=\"border-0 btn-transition btn btn-outline-danger\"\n                >\n                  <i className=\"fa fa-trash\"></i>\n                </button>\n              </div>\n            </div>\n          </div>\n        </li>\n      );\n    });\n    return <ul className=\"list-group list-group-flush\">{listItem}</ul>;\n  }\n  // change classes method\n  getBadgeClasses(tag) {\n    let classes = \"badge ml-2 badge-\";\n    classes += tag === \"Incomplete\" ? \"danger\" : \"success\";\n    return classes;\n  }\n  getIndicatorClasses(tag) {\n    let classes = \"todo-indicator bg-\";\n    classes += tag === \"Incomplete\" ? \"warning\" : \"primary\";\n    return classes;\n  }\n}\n","import React, { Component } from \"react\";\nimport Listitem from \"./Listitem.jsx\";\n\nexport default class App extends Component {\n  state = {\n    items: [\n      {\n        text: \"Some text\",\n        tag: \"Incomplete\",\n        key: \"1\",\n        date: new Date().toLocaleDateString(),\n        time: new Date().toLocaleTimeString(),\n      },\n      {\n        text: \"Again text\",\n        tag: \"Completed\",\n        key: \"2\",\n        date: new Date().toLocaleDateString(),\n        time: new Date().toLocaleTimeString(),\n      },\n    ],\n    currentItem: {\n      text: \"\",\n      key: \"\",\n      tag: \"\",\n      date: \"\",\n      time: \"\",\n    },\n  };\n  // change input handler\n  changeInput = (e) => {\n    let txt = e.target.value;\n    txt = txt.replace(txt.charAt(0), txt.charAt(0).toUpperCase());\n    this.setState({\n      currentItem: {\n        text: txt,\n        key: Date.now(),\n        tag: \"Incomplete\",\n        date: new Date().toLocaleDateString(),\n        time: new Date().toLocaleTimeString(),\n      },\n    });\n  };\n  //form submit handler\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const item = this.state.items;\n    const newItem = this.state.currentItem;\n    console.log(newItem.date);\n    if (this.state.currentItem.text) {\n      this.setState({\n        items: [...item, newItem],\n        currentItem: {\n          text: \"\",\n          key: \"\",\n          date: \"\",\n          time: \"\",\n        },\n      });\n    }\n  };\n  // item remove handler\n  removeItem = (key) => {\n    const item = this.state.items;\n    this.setState({\n      items: item.filter((val) => {\n        return val.key !== key;\n      }),\n    });\n  };\n  //item complete handler\n  completeItem = (key) => {\n    const items = this.state.items.map((val) => {\n      if (val.key === key) {\n        val.tag = \"Completed\";\n      }\n      return val;\n    });\n    this.setState({ items });\n  };\n  render() {\n    return (\n      <div className=\"row mx-auto mt-5 container-fluid\">\n        <div className=\"col-md-8 px-0 mx-auto col-lg-6\">\n          <div className=\"card-hover-shadow-2x mb-3 card\">\n            <div className=\"card-header-tab card-header\">\n              <div className=\"card-header-title font-size-lg text-capitalize font-weight-normal\">\n                <i className=\"fa fa-tasks\"></i>&nbsp;Task Lists\n              </div>\n            </div>\n            <div className=\"scroll-area-sm\">\n              <div className=\"ps-show-limits\">\n                <div style={{ position: \"static\" }} className=\"ps ps--active-y\">\n                  <div className=\"ps-content\">\n                    <Listitem\n                      items={this.state.items}\n                      removeItem={this.removeItem}\n                      completeItem={this.completeItem}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"d-block text-right card-footer\">\n              <form onSubmit={(e) => this.handleSubmit(e)}>\n                <div className=\"input-group\">\n                  <input\n                    onChange={(e) => this.changeInput(e)}\n                    type=\"text\"\n                    value={this.state.currentItem.text}\n                    className=\"form-control\"\n                  />\n                  <div className=\"input-group-prepend\">\n                    <button\n                      type=\"submit\"\n                      className=\"btn btn-primary rounded-right btn-md\"\n                    >\n                      Add Task\n                    </button>\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\";\nimport \"../node_modules/font-awesome/css/font-awesome.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}