{"version":3,"sources":["Listitem.js","App.js","serviceWorker.js","index.js"],"names":["Listitem","listItem","this","props","items","map","val","key","type","value","text","onChange","e","handlerEdit","target","onClick","removeItem","Component","App","state","currentItem","changeInput","setState","Date","now","handleSubmit","preventDefault","item","newItem","x","filter","className","id","onSubmit","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAGqBA,G,mLACT,IAAD,OAEDC,EADQC,KAAKC,MAAMC,MACFC,KAAI,SAACC,GAC1B,OACE,wBAAIC,IAAKD,EAAIC,KACX,2BACEC,KAAK,OACLC,MAAOH,EAAII,KACXC,SAAU,SAACC,GAAD,OAAO,EAAKT,MAAMU,YAAYD,EAAEE,OAAOL,MAAOH,EAAIC,QAE9D,4BAAQQ,QAAS,kBAAM,EAAKZ,MAAMa,WAAWV,EAAIC,OAAjD,YAMN,OAAO,4BAAKN,O,GAjBsBgB,cCCjBC,E,4MACnBC,MAAQ,CACNf,MAAO,GACPgB,YAAa,CACXV,KAAM,GACNH,IAAK,K,EAGTc,YAAc,SAACT,GACb,EAAKU,SAAS,CACZF,YAAa,CACXV,KAAME,EAAEE,OAAOL,MACfF,IAAKgB,KAAKC,U,EAIhBC,aAAe,SAACb,GACdA,EAAEc,iBACF,IAAMC,EAAO,EAAKR,MAAMf,MAClBwB,EAAU,EAAKT,MAAMC,YACvB,EAAKD,MAAMC,YAAYV,MACzB,EAAKY,SAAS,CACZlB,MAAM,GAAD,mBAAMuB,GAAN,CAAYC,IACjBR,YAAa,CACXV,KAAM,GACNH,IAAK,O,EAKbS,WAAa,SAACa,GACZ,IAAMF,EAAO,EAAKR,MAAMf,MACxB,EAAKkB,SAAS,CACZlB,MAAOuB,EAAKG,QAAO,SAACxB,GAClB,OAAOA,EAAIC,MAAQsB,Q,EAIzBhB,YAAc,SAACH,EAAMH,GACnB,IAAMH,EAAQ,EAAKe,MAAMf,MACzBA,EAAMC,KAAI,SAACC,GACLA,EAAIC,MAAQA,IACdD,EAAII,KAAOA,MAGf,EAAKY,SAAS,CACZlB,MAAOA,K,uDAGD,IAAD,OACP,OACE,yBAAK2B,UAAU,QACb,gCACE,6CACA,0BAAMC,GAAG,SAASC,SAAU,SAACrB,GAAD,OAAO,EAAKa,aAAab,KACnD,2BACEJ,KAAK,OACLC,MAAOP,KAAKiB,MAAMC,YAAYV,KAC9BC,SAAU,SAACC,GAAD,OAAO,EAAKS,YAAYT,IAClCsB,YAAY,aAEd,4BAAQ1B,KAAK,UAAb,SAGJ,yBAAKuB,UAAU,kBACb,kBAAC,EAAD,CACE3B,MAAOF,KAAKiB,MAAMf,MAClBY,WAAYd,KAAKc,WACjBH,YAAaX,KAAKW,oB,GApEGI,aCQbkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.60f99939.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Listitem.css\";\n\nexport default class Listitem extends Component {\n  render() {\n    const items = this.props.items;\n    const listItem = items.map((val) => {\n      return (\n        <li key={val.key}>\n          <input\n            type=\"text\"\n            value={val.text}\n            onChange={(e) => this.props.handlerEdit(e.target.value, val.key)}\n          />\n          <button onClick={() => this.props.removeItem(val.key)}>\n            &times;\n          </button>\n        </li>\n      );\n    });\n    return <ul>{listItem}</ul>;\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Listitem from \"./Listitem\";\n\nexport default class App extends Component {\n  state = {\n    items: [],\n    currentItem: {\n      text: \"\",\n      key: \"\",\n    },\n  };\n  changeInput = (e) => {\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        key: Date.now(),\n      },\n    });\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const item = this.state.items;\n    const newItem = this.state.currentItem;\n    if (this.state.currentItem.text) {\n      this.setState({\n        items: [...item, newItem],\n        currentItem: {\n          text: \"\",\n          key: \"\",\n        },\n      });\n    }\n  };\n  removeItem = (x) => {\n    const item = this.state.items;\n    this.setState({\n      items: item.filter((val) => {\n        return val.key !== x;\n      }),\n    });\n  };\n  handlerEdit = (text, key) => {\n    const items = this.state.items;\n    items.map((val) => {\n      if (val.key === key) {\n        val.text = text;\n      }\n    });\n    this.setState({\n      items: items,\n    });\n  };\n  render() {\n    return (\n      <div className=\"main\">\n        <header>\n          <h2>My To Do List</h2>\n          <form id=\"myForm\" onSubmit={(e) => this.handleSubmit(e)}>\n            <input\n              type=\"text\"\n              value={this.state.currentItem.text}\n              onChange={(e) => this.changeInput(e)}\n              placeholder=\"Title...\"\n            />\n            <button type=\"submit\">Add</button>\n          </form>\n        </header>\n        <div className=\"list_container\">\n          <Listitem\n            items={this.state.items}\n            removeItem={this.removeItem}\n            handlerEdit={this.handlerEdit}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}